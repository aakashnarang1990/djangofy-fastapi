class Paginate:
    def __init__(self, page:int, page_size:int, next:str, prev:str):
        pass

class ApiView:
    serializer_class = UserSerialiser
    pagination_class:Optional[Paginate] = None
    lookup_field: Optional[str] = ''

    class QueryParams:
        email: Optional[str] = None

    def __init__(self):
        self.db = SessionLocal()
        self.model = self.get_serializer().Meta.model

    def get_serializer(self):
        return self.serializer_class

    def get_query_params(self, *args, **kwargs):
        default_query_params = inspect.getmembers(self.QueryParams, lambda a: not (inspect.isroutine(a)))
        default_query_params = [a for a in default_query_params if not (a[0].startswith('__') and a[0].endswith('__'))]
        default_query_params = dict(default_query_params)
        query_params = {}
        for k,v in default_query_params.items():
            query_params[k] = kwargs.get(k)
        return query_params


    def get_queryset(self, *args, **kwargs):
        queryset = self.db.query(self.model).filter_by(**self.get_query_params(*args, **kwargs))
        return queryset


    def get(self, *args, **kwargs):
        return self.get_serializer().sanitize_list([i.__dict__ for i in self.get_queryset(*args,**kwargs)])

    async def post(self,*args,**kwargs):
        serializer = kwargs.get('serializer')
        model_instance = await serializer.save()
        return model_instance


